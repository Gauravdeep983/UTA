CSE 6331 Cloud Computing

Student ID: 1001827248
Name: FNU Gauravdeep Singh
Cloud Link: http://gaurav54321.mybluemix.net/

Submission for Assignment 2
_____________________________________________________________________

1. Find the nearest earthquake with magnitude greater than 6
@app.route('/magnitude',methods=['POST'])
def magnitude():
    value=[]
    lat = request.form.get("lat")
    long  = request.form.get("long")
    query = f"SELECT *,\
            (\
                (\
                    (\
                        acos(\
                            sin(( {lat} * 0.01745329251 ))\
                            *\
                            sin(( latitude * 0.01745329251 )) + cos(( {lat} *0.01745329251 ))\
                            *\
                            cos(( latitude * 0.01745329251)) * cos((( {long} - longitude) * 0.01745329251)))\
                    ) * 57.2957795131\
                ) * 60 * 1.1515\
            )\
        as distance FROM earthquake where mag>6 order by distance asc limit 1"
    stmt1 = ibm_db.exec_immediate(conn, query)
    result = ibm_db.fetch_both(stmt1)
    while result:
        value.append(result)
        result = ibm_db.fetch_both(stmt1)
    return render_template('magnitude.html', search=value, lat=lat, long=long)

<div class="container">
  <p class="h3">The Current Location</p>
  <p class="h4">Latitude : {{lat}}</p>
  <p class="h4">Longitude : {{long}}</p>
  <br />

  <table class="table">
    <thead class="thead-light">
      <th scope="col">Time</th>
      <th scope="col">Latitude</th>
      <th scope="col">Longitude</th>
      <th scope="col">Place</th>
      <th scope="col">Distance(in miles)</th>
      <th scope="col">Location Source</th>
    </thead>

    <tbody>
      {% for search in search %}
      <tr>
        <td>{{search[0]}}</td>
        <td>{{search[1]}}</td>
        <td>{{search[2]}}</td>
        <td>{{search[13]}}</td>
        <td>{{search[22]}}</td>
        <td>{{search[20]}}</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>
_____________________________________________________________________

2. Earthquakes within a user-inputted distance.
@app.route('/within-distance',methods=['POST'])
def within_distance():
    value=[]
    lat = request.form.get("lat")
    long  = request.form.get("long")
    dist = request.form.get("dist")
    query = f"SELECT * FROM(\
        SELECT *,\
            (\
                (\
                    (\
                        acos(\
                            sin(( {lat} * 0.01745329251 ))\
                            *\
                            sin(( latitude * 0.01745329251 )) + cos(( {lat} *0.01745329251 ))\
                            *\
                            cos(( latitude * 0.01745329251)) * cos((( {long} - longitude) * 0.01745329251)))\
                    ) * 57.2957795131\
                ) * 60 * 1.1515 * 1.609344\
            )\
        as distance FROM earthquake)\
        where distance <= {dist} order by distance asc"

    stmt1 = ibm_db.exec_immediate(conn, query)
    result = ibm_db.fetch_both(stmt1)
    while result:
        value.append(result)
        result = ibm_db.fetch_both(stmt1)
    return render_template('within-distance.html', search=value, lat=lat, long=long, dist=dist)

<div class="container">
  <p class="h3">The Current Location</p>
  <p class="h4">Latitude : {{lat}}</p>
  <p class="h4">Longitude : {{long}}</p>
  <p class="h4">Earthquakes within : {{dist}} km</p>
  <br />

  <table class="table">
    <thead class="thead-light">
      <th scope="col">Time</th>
      <th scope="col">Latitude</th>
      <th scope="col">Longitude</th>
      <th scope="col">Place</th>
      <th scope="col">Magnitude</th>
      <th scope="col">Distance(in km)</th>
      <th scope="col">Location Source</th>
    </thead>

    <tbody>
      {% for search in search %}
      <tr>
        <td>{{search[0]}}</td>
        <td>{{search[1]}}</td>
        <td>{{search[2]}}</td>
        <td>{{search[13]}}</td>
        <td>{{search[4]}}</td>
        <td>{{search[22]}}</td>
        <td>{{search[20]}}</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>

_____________________________________________________________________

3. User inputted latitude, longitude, magnitude range, date and distance
@app.route('/eq-within-parameters', methods=['POST','GET'])
def eq_within_parameters():
    if request.method == 'POST':
        list_of_data = []
        latitude = request.form.get('lattitude')
        longitude = request.form.get('longitude')
        min_mag = request.form.get('mag_min')
        max_mag = request.form.get('mag_max')
        from_date = str(request.form.get('from_date'))
        to_date = str(request.form.get('to_date'))
        dist = request.form.get('distance')
        params = {'latitude' : latitude, 'longitude' : longitude, 'min_mag': min_mag, 'max_mag': max_mag, 'from_date': from_date, 'to_date': to_date, 'distance': dist }

        query = f"SELECT * FROM (SELECT *,\
            (\
                (\
                    (\
                        acos(\
                            sin(( {latitude} * 0.01745329251 ))\
                            *\
                            sin(( latitude * 0.01745329251 )) + cos(( {latitude} *0.01745329251 ))\
                            *\
                            cos(( latitude * 0.01745329251)) * cos((( {longitude} - longitude) * 0.01745329251)))\
                    ) * 57.2957795131\
                ) * 60 * 1.1515 * 1.609344\
            )\
        as distance FROM EARTHQUAKE WHERE time BETWEEN '{from_date}' and '{to_date}' AND mag BETWEEN {min_mag} and {max_mag}) WHERE distance <= {dist} ORDER BY distance DESC"

        stmt = ibm_db.exec_immediate(conn, query)
        result = ibm_db.fetch_tuple(stmt)
        while result:
            list_of_data.append(result)
            result = ibm_db.fetch_tuple(stmt)
        
        return render_template('eq-parameters.html',data=list_of_data, params=params)


<div class="container">
  <h4>
    Searched for Latitude : <b>{{params['latitude']}}</b> and
    <b>Longitude</b> : {{params['longitude']}} between Magnitude between
    <b>{{params['min_mag']}}</b> and <b>{{params['max_mag']}}</b> and date between
    <b>{{params['from_date']}}</b> and <b>{{params['to_date']}}</b> under
    <b>{{params['distance']}} kms</b>
  </h4>
  <table class="table">
    <thead>
      <tr>
        <th scope="col">Place</th>
        <th scope="col">Latitude</th>
        <th scope="col">Longitude</th>
        <th scope="col">Magitude</th>
        <th scope="col">Time</th>
        <th scope="col">Distance (Kms)</th>
      </tr>
    </thead>
    <tbody>
      {% if data|length>0 %} {% for item in data %}
      <tr>
        <td>{{item[13]}}</td>
        <td>{{item[1]}}</td>
        <td>{{item[2]}}</td>
        <td>{{item[4]}}</td>
        <td>{{item[0]}}</td>
        <td>{{item[22]}}</td>
      </tr>
      {% endfor %} {% else %}
      <tr>
        <td colspan="6" style="text-align: center;">No data available</td>
      </tr>
      {% endif %}
    </tbody>
  </table>
</div>
_____________________________________________________________________

4. All earthquakes between Two-pairs of latitudes and longitudes
@app.route('/latlong',methods=['POST'])
def latlong():
    value=[]
    lat1 = float(request.form.get("lat1"))
    long1  = float(request.form.get("long1"))
    lat2 = float(request.form.get("lat2"))
    long2  = float(request.form.get("long2"))

    #Set min. latitude
    if lat1 < lat2:
        min_lat = lat1
        max_lat = lat2
    else:
        min_lat = lat2
        max_lat = lat1

    #Set min. longitude
    if long1 < long2:
        min_long = long1
        max_long = long2
    else:
        min_long = long2
        max_long = long1
    
    query = f"SELECT * FROM LATLONG WHERE LATITUDE BETWEEN {min_lat} and {max_lat} AND LONGITUDE BETWEEN {min_long} and {max_long}"

    stmt1 = ibm_db.exec_immediate(conn, query)
    result = ibm_db.fetch_both(stmt1)
    while result:
        value.append(result)
        result = ibm_db.fetch_both(stmt1)
    return render_template('latlong-results.html', search=value)

<div class="container">
  <table class="table">
    <thead class="thead-light">
      <th scope="col">COUNTRY</th>
      <th scope="col">LATITUDE</th>
      <th scope="col">LONGITUDE</th>
      <th scope="col">NAME</th>
    </thead>

    <tbody>
      {% for search in search %}
      <tr>
        <td>{{search[0]}}</td>
        <td>{{search[1]}}</td>
        <td>{{search[2]}}</td>
        <td>{{search[3]}}</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>
_____________________________________________________________________


